{
  "index.html": {
    "href": "index.html",
    "title": "PLATEAUのための空間ID生成ツール | PLATEAUのための空間ID生成ツール",
    "keywords": "PLATEAUのための空間ID生成ツール 令和4年度のデジタル庁「デジタルツイン構築に向けた3D都市モデルの整備に関する調査研究」において、人・機械が一意に空間を特定するための3次元グリッド（ボクセル）識別子である「空間ID」の実現・普及に貢献することを目的に、3次元の地理空間情報として中心的役割を担う「3D都市モデル」から「空間ID」を自動生成するツールを開発しました。 このツールは、二つのツールによって構成されています。 空間IDを付与した3D都市モデル生成ツール：3D都市モデルに対し「空間ID」を自動付与するツール 空間IDのメタデータ生成ツール：「空間ID」のメタデータに3D都市モデルの持つ属性情報を自動付与するツール"
  },
  "manual/citygml.html": {
    "href": "manual/citygml.html",
    "title": "空間IDを付与した3D都市モデル生成ツール | PLATEAUのための空間ID生成ツール",
    "keywords": "空間IDを付与した3D都市モデル生成ツール CityGML から 地物ID（gml_id）と空間IDのペアリストを生成 コマンドプロンプト（Windows）またはターミナル（macOS / Linux）を起動し、ツールのディレクトリに移動します。 Windows の場合 > cd command macOS / Linux の場合 $ cd command Python 仮想環境を有効化します。 Windows の場合 > .venv\\Scripts\\Activate macOS / Linux の場合 $ source .venv/bin/activate CityGML から 地物ID（gml_id）と空間IDのペアリストを生成し CSV 出力します。 Windows の場合 > python citygml2id.py [コマンド引数] macOS / Linux の場合 $ python citygml2id.py [コマンド引数] コマンド引数は以下の通りです。 引数 説明 値 デフォルト値 input_file_or_dir CityGMLのファイルのパス（*.gml）または上位ディレクトリのパス output_file_or_dir 地物IDと空間IDのペアリストのファイルのパス（*.csv）または上位ディレクトリのパス --lod 処理するジオメトリの最大LOD 1, 2, 3 3 --grid-type グリッドタイプ zfxy zfxy --grid-level グリッドのズームレベル 20 --grid-size グリッドのサイズ。x y z の順に指定。x のみ指定した場合は y z にも同じ値を適用。将来拡張用。 --grid-crs グリッドの座標参照系のEPSG番号。将来拡張用。 --id IDフィルタ。処理するデータを絞り込む際に gml:id の値を複数指定可能。 --extract 空間IDが付与された CityGML から、空間IDを抽出し、CSVへ出力する場合に指定。 --extrude ２次元データに付与する高さの最小値と最大値（単位：m）。--extract オプション指定時のみ有効。 --interpolate 立体（Solid）内側の空洞をボクセルで埋める場合に指定。Solid形状を持つ「Building（建築物）」「CityFurniture（都市設備）」「Vegetation（植生）」を空間IDに変換する際に使用するオプション。 --merge 上位の空間IDに統合（最適化）する場合に指定。 --debug デバッグログ出力および一時ファイル保持を有効にする場合に指定。 -h 使い方を表示。 使用例1: ファイルを指定し実行する $ python citygml2id.py ../examples/citygml/udx/bldg/building_sample.gml ../examples/citygml/udx/bldg/spatialid/building_sample_zl23_merged.csv --grid-type zfxy --grid-level 23 --interpolate --merge 入力：building_sample.gml【3D都市モデル(CityGML)】 出力：building_sample_zl23_merged.csv グリッドタイプ：ZFXY 基準（最大）ズームレベル：23 空洞部の空間ID生成：実施 ズームレベル最適化：実施 ※ examplesディレクトリのサンプルデータで動作を確認できます。 使用例2: フォルダに対し一括処理をする $ python citygml2id.py ../examples/citygml/udx/bldg ../examples/citygml/udx/bldg --grid-type zfxy --grid-level 23 --interpolate --merge $ python citygml2id.py ../examples/citygml/udx/urf ../examples/citygml/udx/urf --grid-type zfxy --grid-level 20 入力：bldgフォルダ（建築物）とurfフォルダ（都市計画決定情報） 出力：gmlファイルが存在するフォルダ直下にspatialidフォルダを生成しCSVファイルを格納 グリッドタイプ：ZFXY 基準（最大）ズームレベル：bldgフォルダに対しては23、urfフォルダに対しては20 空洞部の空間ID生成：Solid形状の建築物にのみ実施 ※ examplesディレクトリのサンプルデータで動作を確認できます。 CityGML および 地物ID（gml_id）と空間IDのペアリストから空間IDが付与されたCityGMLを生成 コマンドプロンプト（Windows）またはターミナル（macOS / Linux）を起動し、ツールのディレクトリに移動します。 Windows の場合 > cd command macOS / Linux の場合 $ cd command Python 仮想環境を有効化します。 Windows の場合 > .venv\\Scripts\\Activate macOS / Linux の場合 $ source .venv/bin/activate CityGML および 地物ID（gml_id）と空間IDのペアリストから空間IDが付与されたCityGMLを生成します。 Windows の場合 > python id2citygml.py [コマンド引数] macOS / Linux の場合 $ python id2citygml.py [コマンド引数] コマンド引数は以下の通りです。 引数 説明 値 デフォルト値 citygml_file_or_dir CityGMLのファイルのパス(*.gml)または上位ディレクトリのパス id_file_or_dir 地物ID-空間IDペアリストのファイルのパス(*.csv)または上位ディレクトリのパス output_file_or_dir 空間IDを付与した CityGML のファイルのパス(*.gml)または上位ディレクトリのパス --spatialid 空間IDの付与方法 embedding: CityGMLファイルに空間IDを直接付与 reference: 地物ID-空間IDペアリスト（CSVファイル）への相対パスを記録⇒CityGMLファイルへの空間IDの直接付与は行わず、外部ファイル参照のみで空間IDと紐付けする場合に使用 both: CityGMLファイルへの空間ID直接付与とCSVファイルへの相対パス記録の両者を実行 both -h 使い方を表示 使用例3: ファイルを指定し実行する $ python id2citygml.py ../examples/citygml/udx/bldg/building_sample.gml ../examples/citygml/udx/bldg/spatialid/building_sample_zl23_merged.csv ../examples/citygml/udx/bldg/building_sample.gml --spatialid both 入力：building_sample.gml 地物IDと空間IDのペアリスト（CSV）：building_sample_zl23_merged.csv 出力：building_sample.gml（ファイルを更新） 空間IDの付与方法：CityGMLへの直接付与と外部ファイル参照（相対パス埋め込み）の両方 ※ examplesディレクトリのサンプルデータで動作を確認できます。事前に使用例1又は使用例2を実行しておいてください。 使用例4: フォルダに対し一括処理をする $ python id2citygml.py ../examples/citygml/udx/bldg ../examples/citygml/udx/bldg ../examples/citygml/udx/bldg --spatialid both $ python id2citygml.py ../examples/citygml/udx/urf ../examples/citygml/udx/urf ../examples/citygml/udx/urf --spatialid both 入力：bldgフォルダ（建築物）とurfフォルダ（都市計画決定情報） 地物IDと空間IDのペアリスト（CSV）：bldgフォルダとurfフォルダ内にあるspatialidフォルダ 出力：bldgフォルダとurfフォルダ（フォルダ内のcitygmlファイルを更新） 空間ID付与方法：CityGMLへの直接付与と外部ファイル参照（相対パス埋め込み）の両方 ※ examplesディレクトリのサンプルデータで動作を確認できます。なお、使用例2を事前に実行しておいてください。"
  },
  "manual/program.html": {
    "href": "manual/program.html",
    "title": "プログラム設計 | PLATEAUのための空間ID生成ツール",
    "keywords": "プログラム設計 空間IDを付与した3D都市モデル生成ツール プログラム構成 プログラム構成 説明 1 メインプログラム citygml2id.py CityGML から gml_id と空間IDのペアを CSV 出力するツール 2 id2citygml.py 空間IDのCSV ファイルからCityGMLファイルを更新（空間IDの拡張属性作成）するツール 3 サブプログラム grids.py ボクセルグリッドを構築するためのプログラム 4 inputs.py ファイルを入力するためのプログラム 5 outputs.py ファイルを出力するためのプログラム 6 prepare.py CityGMLファイルを前処理（解析）するためのプログラム 7 constants.py 定数定義 アーキテクチャ システムアーキテクチャ データアーキテクチャ 空間IDのメタデータ生成ツール 本ツールは空間IDが付与されたCityGMLファイルを入力とし、地物IDと空間IDのペアリストファイル（CSV形式）を出力するコマンド部と、地物IDと空間IDのペアリストファイルを可視化するためのビューア部に分かれている。コマンド部は、空間IDを付与した3D都市モデル生成ツールと同じであるため、ビューア部について説明する。 ソフトウェア構成（ビューア部） プログラム構成（ビューア部） プログラム構成（ビューア部） 説明 1 サーバ server.py 空間IDからボクセル形状の生成等を行うプログラム 2 cleanup.py 一時ディレクトリの古いファイルを削除するプログラム 3 ビューアクライアント index.js サーバへのファイルアップロードとサーバから配信されるデータをビューアに表示するプログラム 4 attribute.js 空間ID（ボクセル）のメタデータ（3D Tiles/ Mapbox Vector Tileに記録された属性）を取得するプログラム システムアーキテクチャ データアーキテクチャ"
  },
  "manual/setup.html": {
    "href": "manual/setup.html",
    "title": "セットアップ | PLATEAUのための空間ID生成ツール",
    "keywords": "セットアップ 動作要件 本ツールの動作要件は以下の通りです。 OS Windows macOS Linux ソフトウェア Python 3.9 Google Chrome / Microsoft Edge (ビューア部のみ) 環境構築 空間IDを付与した3D都市モデル生成ツール コマンドプロンプト（Windows）またはターミナル（macOS / Linux）を起動し、ツールのディレクトリに移動します。 Windows の場合 > cd command macOS / Linux の場合 $ cd command Python 仮想環境を作成し有効化します。 Windows の場合 > python -m venv .venv > .venv\\Scripts\\Activate macOS / Linux の場合 $ python3 -m venv .venv $ source .venv/bin/activate ※ コマンド内の.venv は任意の名前に変更可能です。 Python 仮想環境に依存ライブラリをインストールします。 Windows の場合 > pip install -r requirements.txt macOS / Linux の場合 $ pip install -r requirements.txt 空間IDのメタデータ生成ツール コマンド部 空間IDを付与した3D都市モデル生成ツールと同様です。 ビューア部 コマンドプロンプト（Windows）またはターミナル（macOS / Linux）を起動し、ツールのディレクトリに移動します。 Windows の場合 > cd web macOS / Linux の場合 $ cd web Python 仮想環境を作成し有効化します。 Windows の場合 > python -m venv .venv > .venv\\Scripts\\Activate macOS / Linux の場合 $ python3 -m venv .venv $ source .venv/bin/activate ※ コマンド内の.venv は任意の名前に変更可能です。 Python 仮想環境に依存ライブラリをインストールします。 Windows の場合 > pip install -r requirements.txt macOS / Linux の場合 $ pip install -r requirements.txt 座標変換に必要なファイルをダウンロードします。 Windows の場合 > pyproj sync --file us_nga_egm96_15.tif macOS / Linux の場合 $ pyproj sync --file us_nga_egm96_15.tif"
  },
  "manual/spatialid.html": {
    "href": "manual/spatialid.html",
    "title": "空間IDのメタデータ生成ツール | PLATEAUのための空間ID生成ツール",
    "keywords": "空間IDのメタデータ生成ツール コマンド部 コマンドプロンプト（Windows）またはターミナル（macOS / Linux）を起動し、ツールのディレクトリに移動します。 Windows の場合 > cd command macOS / Linux の場合 $ cd command Python 仮想環境を有効化します。 Windows の場合 > .venv\\Scripts\\Activate macOS / Linux の場合 $ source .venv/bin/activate 空間IDが付与された CityGML から 地物ID（gml_id）と空間IDのペアリストを CSV 出力します。 Windows の場合 > python citygml2id.py [コマンド引数] macOS / Linux の場合 $ python citygml2id.py [コマンド引数] コマンド引数は以下の通りです。 引数 説明 値 デフォルト値 input_file_or_dir CityGMLのファイルのパス（*.gml）または上位ディレクトリのパス output_file_or_dir 地物IDと空間IDのペアリストのファイルのパス（*.csv）または上位ディレクトリのパス --lod 処理するジオメトリの最大LOD 1, 2, 3 3 --grid-type グリッドタイプ zfxy zfxy --grid-level グリッドのズームレベル 20 --grid-size グリッドのサイズ。x y z の順に指定。x のみ指定した場合は y z にも同じ値を適用。将来拡張用。 --grid-crs グリッドの座標参照系のEPSG番号。将来拡張用。 --id IDフィルタ。処理するデータを絞り込む際に gml:id の値を複数指定可能。 --extract 空間IDが付与された CityGML から、空間IDを抽出し、CSVへ出力する場合に指定。 --extrude ２次元データに付与する高さの最小値と最大値（単位：m）。--extract オプション指定時のみ有効。 --interpolate 立体（Solid）内側の空洞をボクセルで埋める場合に指定。Solid形状を持つ「Building（建築物）」「CityFurniture（都市設備）」「Vegetation（植生）」を空間IDに変換する際に使用するオプション。 --merge 上位の空間IDに統合（最適化）する場合に指定。 --debug デバッグログ出力および一時ファイル保持を有効にする場合に指定。 -h 使い方を表示。 使用例5：2次元の空間ID（地理院タイル(XYZタイル)）が付与されたCityGMLファイルから空間IDを抽出し、3次元の空間ID（ZFXYタイル）を生成する $python citygml2id.py ../examples/citygml/udx/urf/urf_yoto_sample.gml ../examples/citygml/udx/urf/spatialid/urf_yoto_sample_zl20_3D.csv --grid-type zfxy --extract --extrude -10.0 100.0 入力：urf_yoto_sample.gml 出力：urf_yoto_sample_zl20_3D.csv 空間IDを生成する標高値の範囲：-10mから100m ※ examplesディレクトリのサンプルデータで動作を確認できます。事前に使用例2と使用例4を実行しておいてください。 ビューア部 ※ 本ドキュメントでは開発サーバを用いた手順に限定します。運用環境では Apache や Nginx 等の Web サーバと mod_wsgi や uwsgi 等の WSGI 準拠ミドルウェアを組み合わせてデプロイすることを推奨いたします。 コマンドプロンプト（Windows）またはターミナル（macOS / Linux）を起動し、ツールのディレクトリに移動します。 Windows の場合 > cd web macOS / Linux の場合 $ cd web Python 仮想環境を有効化します。 Windows の場合 > .venv\\Scripts\\Activate macOS / Linux の場合 $ source .venv/bin/activate 開発サーバを起動します Windows の場合 > flask --app server run macOS / Linux の場合 $ flask --app server run Webブラウザでビューアのトップページを開きます。URLは以下の通りです。 http://127.0.0.1:5000 データアップロード 3D都市モデル、空間IDの順にアップロードします。 データ確認 チェックボックスで3D都市モデルや空間IDの表示を切り替えることができます。 3D都市モデルや空間ID（ボクセル）をクリックすると属性情報が表示されます。 ※ 3D都市モデル、空間IDの順にアップロードした場合、空間IDのメタデータに3D都市モデルの属性情報が付与されます。 ※ ビューアで表示する3D都市モデルは、FME Hubで公開されているFMEワークスペースPLATEAU2可視化用データ変換によって変換されたCesium 3D Tiles データセット (3Dモデル) または Mapbox Vector Tile (MVT) データセット (2Dポリゴン)を使用します。JSON属性にgml:idが記録されていない場合は、このワークスペースを編集し出力してください。"
  }
}